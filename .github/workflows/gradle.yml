name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    - name: Set up Git
      run: |
          git config --global user.name "chandrupsj22"
          git config --global user.email "133023965+chandru-kloudping@users.noreply.github.com"
    - name: Determine Latest Tag
      id: latest_tag
      run: |
          latest_tag=$(git describe --tags --abbrev=0 "v1.*" 2>/dev/null)
          if [ -z "$latest_tag" ]; then
            echo "No previous tags found, starting with v1.0"
            echo "::set-output name=tag::v1.0"
          else
            latest_minor=$(echo "$latest_tag" | awk -F'.' '{print $2}')
            minor=$((latest_minor + 1))
            echo "Latest tag: $latest_tag"
            echo "Incremented minor version: $minor"
            echo "::set-output name=tag::v1.$minor"
          fi
    - name: Create tag
      run: |
          git tag -a ${{ steps.latest_tag.outputs.new_tag }} -m "Tag created by GitHub Actions"
          git push origin --tags
                
    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: build
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: build-artifacts
        path: build/
    - name: List Artifacts
      run: |
        echo "Build Artifacts:"
        ls ${{ steps.view.outputs.artifact_folder }}
    - name: Display .jar File Name
      run: |
        echo "The .jar file name is: $(find build/ -name '*.jar')"
    - name: Download and List Artifacts
      uses: actions/download-artifact@v2
      with:
        name: build-artifacts
        path: build-artifacts
    - name: List Artifact Contents
      run: ls -R build-artifacts/distributions
